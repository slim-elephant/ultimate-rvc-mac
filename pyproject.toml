[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ultimate-rvc"
version = "0.5.13"
description = "Ultimate RVC"
readme = "README.md"
requires-python = "==3.12.*"
dependencies = [
  #Validation
  "pydantic==2.11.3",
  "lazy-loader==0.4.0",

  # CLI
  "typer==0.16.0",

  # Networking
  "requests==2.32.3",
  "yt_dlp>=2025.1.26",
  "nodejs-wheel-binaries==22.14.0",
  "wget==3.2",

  # Data science
  "numpy==2.2.5",
  "scipy==1.15.2",
  "matplotlib==3.10.1",
  "tqdm==4.67.1",
  "gradio==5.25.2",
  "pandas-stubs==2.3.0.250703",

  # Machine learning
  "torchcrepe==0.0.23",
  "faiss-cpu==1.10.0",
  # Use CPU version of onnxruntime for macOS compatibility
  "onnxruntime==1.20.1",
  "local-attention==1.11.1",
  "einops==0.8.1",
  "transformers==4.49.0",
  "tensorboardX==2.6.2.2",
  "tensorboard==2.19.0",
  "torch-tb-profiler==0.4.3",

  # Audio
  "static-ffmpeg==2.13",
  "static-sox==1.0.2",
  "typed-ffmpeg==2.6.2",
  "soundfile==0.13.1",
  "librosa==0.10.2",
  "sox==1.5.0",
  "soxr==0.5.0.post1",
  "pydub==0.25.1",
  "pydub-stubs==0.25.1.2",
  "pedalboard==0.9.16",
  "audio-separator==0.31.1",
  "noisereduce==3.0.3",
  "edge-tts==7.0.0",
  # TODO potentially add these later
  # below package outcommented until we use dio,pm and harvest
  #"pyworld-fixed==0.3.8",
  # below package outcommented until we use praat 
  # (for example for formant shifting with "change gender command")
  #"praat-parselmouth==0.4.5",
]

[dependency-groups]
dev = [
  "pre-commit==4.2.0",
  "pytest==8.4.1",
  "pytest-xdist==3.8.0",
  "pytest-cov==6.2.1",
  "pytest-mock==3.14.1",
  "pytest-asyncio==1.1.0",
  "pytest-timeout==2.4.0",
  "faker==37.4.2",
]

[project.optional-dependencies]
cuda = ["torch==2.7.0+cu128", "torchaudio==2.7.0+cu128"]
rocm = [
  "torch==2.6.0+rocm6.2.4 ; sys_platform == 'linux'",
  "torchaudio==2.6.0+rocm6.2.4 ; sys_platform == 'linux'",
  "pytorch-triton-rocm==3.2.0 ; sys_platform == 'linux'",
]

[project.scripts]
urvc = "ultimate_rvc.cli.main:app"
urvc-web = "ultimate_rvc.web.main:app_wrapper"

[tool.uv]
environments = ["sys_platform == 'win32'", "sys_platform == 'linux'"]
cache-dir = "./uv/cache"
compile-bytecode = true
conflicts = [[{ extra = "cuda" }, { extra = "rocm" }]]

[tool.uv.sources]
audio-separator = { git = "https://github.com/JackismyShephard/python-audio-separator", branch = "patch-1" }
torch = [
  { index = "torch-rocm", extra = "rocm" },
  { index = "torch-cu128", extra = "cuda" },
]
torchaudio = [
  { index = "torch-rocm", extra = "rocm" },
  { index = "torch-cu128", extra = "cuda" },
]
pytorch-triton-rocm = [{ index = "torch-rocm", extra = "rocm" }]

[[tool.uv.index]]
name = "torch-cu128"
url = "https://download.pytorch.org/whl/cu128"
explicit = true

[[tool.uv.index]]
name = "torch-rocm"
url = "https://download.pytorch.org/whl/rocm6.2.4"
explicit = true

[tool.pyright]
stubPath = "src/ultimate_rvc/stubs"
pythonVersion = "3.12"
pythonPlatform = "All"
typeCheckingMode = "strict"
ignore = ["**/.venv"]
exclude = ["./uv", "src/ultimate_rvc/rvc"]
venvPath = "."
venv = "uv/.venv"

[tool.black]
target-version = ['py312']
preview = true
enable-unstable-feature = ["string_processing"]

[tool.ruff]
target-version = "py312"
fix = true
required-version = ">=0.5.7"

[tool.ruff.format]
docstring-code-format = true
preview = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # Ignore missing blank before between class name and docstring
  "D203",
  # Do not require a description after summary line in docstring
  "D205",
  # Do not require summary line to be located on first physical line of docstring
  "D212",
  # Do not require docstring section names to end with colon
  "D416",
  # Ignore TODO notes
  "FIX002",
  "TD002",
  "TD003",
  "TD004",
  # Ignore missing copyright notice
  "CPY001",
  # Ignore function signatures with too many arguments
  "PLR0913",
  # ignore function signatures with too many positional arguments
  "PLR0917",
  # Ignore boolean positional argument in function signature
  "FBT002",
  "FBT001",
  "COM812", # ignore missing trailing comma as formatter will add it
]
unfixable = ["F401"]
preview = true

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = ["T201"] # Allow print statements in Jupyter notebooks
"tests/**/*.py" = [
  "S101",
  "PLR6301",
] # Allow assert statements in test files, ignore unused self in pytest test methods

[tool.ruff.lint.flake8-annotations]
#ignore-fully-untyped = true

[tool.ruff.lint.isort]
relative-imports-order = "closest-to-furthest"
section-order = [
  "future",
  "typing",
  "importing",
  "standard-library",
  "third-party",
  "networking",
  "validation",
  "data-science",
  "machine-learning",
  "audio",
  "cli",
  "first-party",
  "ultimate_rvc",
  "local-folder",
]

[tool.ruff.lint.isort.sections]
"typing" = ["typing", "typing_extensions"]
"importing" = ["lazy_loader"]
"networking" = [
  "requests",
  "yt_dlp",
  "deemix",
  "wget",
  "flask",
  "beautifulsoup4",
  "pypresence",
]
"validation" = ["pydantic"]
"data-science" = ["numpy", "scipy", "matplotlib", "tqdm", "pandas", "gradio"]
"machine-learning" = [
  "torch",
  "torchaudio",
  "transformers",
  "torchcrepe",
  "faiss",
  "tensorboard",
  "local_attention",
  "einops",
]
"audio" = [
  "static_ffmpeg",
  "static_sox",
  "ffmpeg",
  "soundfile",
  "librosa",
  "sox",
  "pydub",
  "pedalboard",
  "audio_separator",
  "parselmouth",
  "pyworld",
  "noisereduce",
  "audio_upscaler",
  "edge_tts",
]
"cli" = ["typer", "rich"]
"ultimate_rvc" = ["ultimate_rvc"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 72

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
pythonpath = ["src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
  "--strict-markers",
  "--strict-config",
  "--color=yes",
  "--tb=short",
  "--cov=src/ultimate_rvc",
  "--cov-report=html:htmlcov",
  "--cov-report=term-missing:skip-covered",
  "--cov-fail-under=90",
  "--durations=10",
  "--doctest-modules",
  "--doctest-continue-on-failure",
  "--doctest-ignore-import-errors",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "gpu: marks tests as requiring GPU",
  "network: marks tests as requiring network access",
  "audio: marks tests as audio processing tests",
  "cli: marks tests as CLI interface tests",
]
timeout = 300
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
doctest_optionflags = "NORMALIZE_WHITESPACE ELLIPSIS NUMBER"
log_cli = true
log_cli_level = "WARN"
